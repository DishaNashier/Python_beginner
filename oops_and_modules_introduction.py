# -*- coding: utf-8 -*-
"""OOPS and Modules Introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jt-_pmRSdaH749kTdNrva8pntpU0tNCM
"""

#Agenda:
# OOP- Object Oriented Programming
# Modules
# In Depth we will study in advance Python Module
#-----------Functional Programming---- ✅Reusability
# We have learned to create fucntions already
#def lcm(a,b):
  # code
  # code
#def sqrt(a):
  # code
  # code
#def mult(a):
  #code
  #code
#Programming Paradigm/ the way we write the code or structure the code
## sequential Paradigm
## functional Paradigm
## OOP Paradigm
# ------------------------------------------------
# Object Oriented Prgramming important key words
# -------------------------------------------------
#### Classes - Blueprint - String, integer, list will always be a class
#### Objects - Instance/ Actual data of the class
#### 💡💡Everything in Python is an Object💡💡

print("Example of Inbuilt classes")
greet="Good morning"
ls=[1,2,3,4]
amount=2000
print(type(greet))
print(greet)
print()
print(type(ls))
print(ls)
print()
print(type(amount))
print(amount)

#@title Instance function
# isinstance(obj, class_or_tuple, /)
# Return whether an object is an instance of a class or of a subclass thereof.
# A tuple, as in isinstance(x, (A, B, ...)), may be given as the target to
# check against. This is equivalent to isinstance(x, A) or isinstance(x, B) or ... etc.

#Everything in Python is an Object
# Object is the root class in Python
# Then we have root class, derived class - list,int
greet="Good morning"
print(greet)
print(isinstance(greet,int))
print(isinstance(greet,str))
print(isinstance(greet,object))
ls=[1,2,3,4]
print(ls)
print(isinstance(ls,list))
print(isinstance(ls,int))
print(isinstance(ls,object))

#functions are also object
isinstance(print(),object)

# We can create our own data type
# To create any data type we have to create a class
# Lets create a class student
class Student:
  pass

# Objects also called instances
# creating Object/ instantiation
s1=Student()
print(type(s1))


# Output is - <class '__main__.Student'>
# __main__ "means user defined class"
# __main__ refer current notebook
# if we have imported modules/ packages from somewhere else than __main__ will be replaced by name of that packages

# We have created class Student in this script,
# similarly some other script may have some other user defined class
# And we can import those user defined classes(⭐modules and packages⭐) to our script

# @title Classes
# Classes should have two main items
# 1. Properties(variables) For eg:- name,class,age
# 2. Functions/Methods - Actions-> introduction, average attendence
# ***** 4 Pillars of OOP******
#  1. Encapsulation - Putting/wrapping things together
#  2. Abstraction- hiding the details and only giving the functionality
#  3. Inheritance- Parent class-> child class, For eg- Car is Parent class and its properties are child class(model, color, price)
#  4. Polymorphism- (Poly- Multiple morph- forms) different behaviour

# Example of Polymorphism
# + operator - single operator multiple function
print(56+4) # Arithmetic addition
print("56"+"4")# String addition/concatination

class Student:
  pass
s1=Student()
s1.name="Disha"
print(s1.name)

s2=Student()
s2.name="Nashier"
print(s2.name)

# Constructor/Initialiser- In Built function
 # Memory is allocated- allocation done by memory manager
 # Initializer __init__()
#  - initialise all the properties/attributes
# 💡DUNDERS(double underscore) and magic methods 🪄

class Student():
  def __init__(random_var):
    print("Hello from initializer")
    print(random_var)
#💡random_var is refering to the object itself, so we generally name it as self

s1= Student()

s2=Student()

print(s1)
print(s2)

class Student():
  def __init__(self,name,age):
    self.name=name #if we use s1.name, s2.name it will not work, so we use self.name
    self.age=age

s1=Student("Disha",25)
s2=Student("Manisha",27)

print(s1.name)
print(s1.age)

print(s2.name)
print(s2.age)

s1.intro()

class Student():
  def __init__(self,name,age):
    if isinstance(name,str) and isinstance(age,int):
      self.name=name #if we use s1.name, s2.name it will not work, so we use self.name
      self.age=age
  def intro(self):
    print(f'Hi,My name is{self.name} and I am {self.age} year old.')

s1=Student("Disha",25)
s2=Student("Manisha",27)

s1.intro()

s2.intro()

class Dog():
  def __init__(self,breed,age):
    self.breed=breed
    self.age=age
  def intro(self):
    print(f'dog breed is {self.breed} and dog age is {self.age}')

dog1=Dog("libra",4)
dog2=Dog("german",3)
dog1.intro()

dog2.intro()

class Dog():
  def __init__(self,breed,age):
    self.breed=breed
    self.age=age
    self.tricks=[]
  def intro(self):
    print(f'dog breed is {self.breed} and dog age is {self.age}')
  def teach_trick(self,trick):
    self.tricks.append(trick)

dog1=Dog("libra",4)
dog2=Dog("german",3)

dog1.tricks

dog1.teach_trick("catching the ball")

dog1.tricks

dog2.teach_trick("Jumping")

dog2.tricks # we are not using () at end because it is a method not function

dog1.teach_trick("Running")

dog1.tricks

# Methods are functions attached with objects

#@title Modules

import math

math.gcd(2,8)

import os, datetime,random

# math,os,datetime,random all are modules

#@title Package

# multiple modules are packages/Libraries
# Libraries
# -- NumPy
# -- Pandas
# -- MatPlotlib
# -- Seaborn

import numpy

arr=numpy.array([1,5,10])

print(type(arr))

# <class 'numpy.ndarray'>
# numpy suggests ndarray class belongs to numpy module

import pandas as pd #pd short name

import numpy as np #np short name

# if you do not want to use entire package functions you can import specific function
from sklearn.model_selection import train_test_split

#in colab almost all required modules already exist
# in local system you have to install modules using
# pip install numpy
# pip install pandas
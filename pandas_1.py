# -*- coding: utf-8 -*-
"""Pandas_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1inv-HaOCUrPGyWH1xhzCAm_ZcjW39BH0
"""

import numpy as np
import pandas as pd

# NumPy provide functionalities for numbers
# Pandas also provide functions for strings and other data types
#********************************************************************************************
# Commands discussed -
# df=pd.read_csv() #To read csv files
# df.info() #to get information of dataframe -> columns,Count-No of rows,Non-Null, Dtype
# df.head() # to get first five enteries
# df.head(N) # N= No of enteries you want to be displayed from first
#
#**********************************************************************************************
#
# df.tail() # to get last five enteries
# df.tail(N) # N= No of enteries you want to be displayed from last
#**********************************************************************************************
# df["column_name"] # to get details of specific column
# type(df["column_name"]) #to get type of column df -> Series type
# df.shape #to get (No of rows, No of columns) in tuple form
#
#**********************************************************************************************
#
# df.columns #to get list of names of columns and data type
# df.keys()  #to get list of names of columns and data type
#
# *********************************************************************************************
#
# df["column_name"].head()  # to get top 5 values of specific column
# df[["column_name"]].head() # to get top 5 values of specific column in table format
# df[["column_name1","column_name2"]].head() # to get top 5 values of specific columns in table format
# df["columns_name"].unique() #to get unique values
# df["columns_name"].value_counts() #to get number of times a value is repeating in specific column
#
# *********************************************************************************************
# To rename column name
# *********************************************************************************************
# df.rename({"original_name_col1":"updated name","original_name_col1":"updated name"},axis=1)
# df.rename(columns={"country":"Country"})
# ##############   inplace= True for permanent change  ################################
# df.rename({"population":"Population","country":"Country"},axis=1,inplace=True)
# df.drop('coumn_name',axis=1) # while doing any change to column we should always put axis
# df.drop(columns=['column_name'])
# df.drop(df.columns["index position"],axis=1)
#
# *********************************************************************************************
# To create new column based on calculations of existing columns
# *********************************************************************************************
# df["New_column_name"]=df["column_name"]+7
# df['New_column_name']=df['column1']*df["column2"]
# df["New_column_name"]=[i for i in range(no_of_rows)]
# *********************************************************************************************
# To get indexs(implicit indexes) and change index values(explicit indexes)
# *********************************************************************************************
# df.index.values #to retrieve indexs
# df.index=list(range(1,df.shape[0]+1)) # to start index from 1
# df.index=np.arange(1,df.shape[0]+1,dtype='float') # to change datatype of index to float
# df.index=['a','b','c','d','e'] #explicit index in string format
# *****Note- if you have changed indexing than while slicing explicit index uses implicit indexing while slicing

# temp=df.set_index("Country") # we can also set index positions based on characters
#  df.reset_index()  # to reset indexes to original indexing
#  temp.reset_index(drop=True, inplace=True)
# # *********************************************************************************************
# # Pandas Functions
#   loc-explicit indexing
#   iloc-implicit indexing
# *********************************************************************************************
# df.loc[1] # explicit indexing starting from 1
# df.loc[1:3] # during explicit calling both starting and last index is included
# df.iloc[1] #returning based on implicit indexing
# df.loc[-1] #❌ we cannot use -1 indexing with loc function because it is implicit indexing
# **********************************************************************************************
# To create data frame using key value pair
# pd.DataFrame({'a':[1,2,3],'b':[2,3,'four']})
#
# To create data frame using list ([[row values]],columns=[])
# pd.DataFrame([['Afghanistan',1952,8425333,'Asia',28.801,779.445314],['Afghanistan',1957,9240934,'Asia',30.332,820.853030],['Afghanistan',1962,102267083,'Asia',31.997,858.100710]],columns=['country','year','population','continent','life_exp','gdp_cap'])
#
## to add new rows using loc function
# df.loc[len(df.index)+1]=['India',200,13500000,37.08,900.23]
#
# to display duplicated rows
# df.loc[df.duplicated()]
#
# to drop duplicated rows
# df.drop_duplicates()

!wget "https://drive.google.com/uc?export=download&id=1E3bwvYGf1ig32RmcYiWc0IXPN-mD_bI_" -O mckinsey.csv

df=pd.read_csv('mckinsey.csv')

df

type(df)

df.info()

df.head()

df.tail()

df["country"]

type(df["country"])

df.head(5)

df.tail(5)

df.shape

df.columns

df.keys()

df['country'].head()

df[['country']].head()

df[["country","year"]].head()

df['country'].unique()

df['country'].value_counts()

df.columns

df.rename({"population":"Population","country":"Country"},axis=1)

df.head()

df.rename(columns={"country":"Country"})

df.rename({"population":"Population","country":"Country"},axis=1,inplace=True)
#inplace= True for permanent change without

df.columns

df["Country"]

df.Country

df.drop('continent',axis=1) # while doing any change to column we should always put axis

df.drop(columns=['continent'])

#Given a dataframe consiting of 5 coumns, which is the correct code to drop the 3rd column from the start

df.drop(df.columns[3],axis=1)

df

df["year+7"]=df["year"]+7

df.head()

df['gdp']=df['gdp_cap']*df["Population"]

df.head()

df.shape

# for i in range(1704):
#   arr.append(i)

[i for i in range(1704)]

df["Own"]=[i for i in range(1704)]

df.head()

df.drop(columns=["Own","gdp","year+7"],axis=1,inplace=True)

df

df.index.values

df.index=list(range(1,df.shape[0]+1)) #change index value starting from 0 to starting from 1

df.head()

#implicit index/ python index/ -> always starting from 0
#explicit index/ user defined index/-> starting from user defined values
df.index[1]

df.index[0] #for implicit index 0 what is explicit index

#index as float
df.index=np.arange(1,df.shape[0]+1,dtype='float')

df.head()

sample=df.head()

sample.shape

sample

sample.index=['a','b','c','d','e'] #explicit index in string format

sample

df.index=np.arange(1,df.shape[0]+1,dtype='int')

df.head()

ser=df["Country"]

ser.head(15)

ser[12] #returning explicit index

ser[12:16] #returning implicit index while slicing

# in series if you use single index method # it uses explicit index
# in series while slicing it uses implicit index

df[0]

df[5:15] # using implicit indexing

# Pandas Functions
#loc-explicit indexing
#iloc-implicit indexing

df.head()

df.loc[1]

df.loc[1:3] #during explicit calling both starting and last index is included

demo=pd.Series(['a','b','c','d','e'],index=[1,5,3,7,3])

demo.loc[1:3]

demo

df.loc[9::-3]

df.head()

df.iloc[1] #returning based on implicit indexing

df.iloc[0:2]

df.iloc[[1,10,100]]

df.loc[-1] #we cannot use -1 indexing with loc function because it is implicit indexing

df.iloc[-1]

df.iloc[29:40,-3:]

df.head()

temp=df.set_index("Country")

temp

temp.loc['Afghanistan']

df.reset_index()

temp.reset_index(drop=True, inplace=True)

#To create data frame using key value pair
pd.DataFrame({'a':[1,2,3],'b':[2,3,'four']})

# To create data frame using list ([[row values]],columns=[])
pd.DataFrame([['Afghanistan',1952,8425333,'Asia',28.801,779.445314],['Afghanistan',1957,9240934,'Asia',30.332,820.853030],['Afghanistan',1962,102267083,'Asia',31.997,858.100710]],columns=['country','year','population','continent','life_exp','gdp_cap'])

df.tail()

#to add new rows using loc function
df.loc[len(df.index)+1]=['India',200,13500000,37.08,900.23]
df.loc[len(df.index)+1]=['Sri Lanka',2022,130000000,80.0,500.00]
df.loc[len(df.index)+1]=['Sri Lanka',2022,130000000,80.0,500.00]
df.loc[len(df.index)+1]=['India',200,13500000,37.08,900.23]
df

#to display duplicated rows
df.loc[df.duplicated()]

df.drop_duplicates()

